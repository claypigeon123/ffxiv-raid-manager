def image
def version
pipeline {

    environment {
        ROOT = "cp-raid-manager-system-controller-app"
        NAME = "cp-raid-manager-system-controller-app"
        MVN_TO_USE = "maven-3.6.3"
        JDK_TO_USE = "jdk-11"
    }

    agent any

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    triggers {
        pollSCM('H/5 * * * *')
    }

    stages {
        stage ('Preparation') {
            steps {
                deleteDir()
                checkout scm
                script {
                    version = readMavenPom(file: "${env.ROOT}/pom.xml").getVersion()
                }
            }
        }

        stage ('Maven package') {
            steps {
                withMaven(maven: env.MVN_TO_USE, jdk: env.JDK_TO_USE) {
                    sh "mvn -f ${env.ROOT}/pom.xml clean package"
                }
            }
        }

        stage ('Maven deploy') {
            steps {
                withMaven(maven: env.MVN_TO_USE, jdk: env.JDK_TO_USE) {
                    sh "mvn -DskipTests=true -f ${env.ROOT}/pom.xml deploy"
                }
            }
        }

        stage ('Docker build') {
            steps {
                script {
                    //docker.withTool('docker') {
                        //docker.withRegistry('http://build.cp-sys.hu', 'pigeon-nexus') {
                            image = docker.build("${env.NAME}:${version}", "--build-arg MICROSERVICE_NAME=${env.NAME} --build-arg MICROSERVICE_VERSION=${version} ${env.ROOT}")
                        //}
                    //}
                }
            }
        }

        stage ('Docker push') {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry('http://build.cp-sys.hu', 'pigeon-nexus') {
                            image.push "${version}"
                        }
                    }
                }
            }
        }
    }
}
