def image
pipeline {

    environment {
        ROOT = "cp-raid-manager-system-controller-app"
        NAME = "cp-raid-manager-system-controller-app"
        MVN_TO_USE = "maven-3.6.3"
        JDK_TO_USE = "jdk-11"

        /*VERSION = script {
            def ver
            withMaven(maven: env.MVN_TO_USE, jdk: env.JDK_TO_USE) {
                ver = sh(script: "mvn -q -f ${ROOT}/pom.xml -Dexec.executable=\'echo\' -Dexec.args=\'\${project.version}\' --non-recursive exec:exec", returnStdout: true).trim()
                ver = ver.split("\n")[-1]
            }
            return ver
        }*/
    }

    agent any

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    triggers {
        pollSCM('H/5 * * * *')
    }

    stages {
        stage ('Preparation') {
            steps {
                deleteDir()
                checkout scm
            }
        }

        stage ('Maven package') {
            steps {
                withMaven(maven: env.MVN_TO_USE, jdk: env.JDK_TO_USE) {
                    sh "mvn -f ${env.ROOT}/pom.xml clean package"
                }
            }
        }

        stage ('Maven deploy') {
            steps {
                withMaven(maven: env.MVN_TO_USE, jdk: env.JDK_TO_USE) {
                    sh "mvn -DskipTests=true -f ${env.ROOT}/pom.xml deploy"
                }
            }
        }

        stage ('Docker build') {
            steps {
                sh "echo ${POM_VERSION}"
                /*script {
                    docker.withRegistry("http://pigeon-nexus:1900", "pigeon-nexus") {
                        image = docker.build()
                    }
                }*/
            }
        }
    }
}
